/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewerImport } from './routes/viewer'
import { Route as SettingsImport } from './routes/settings'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PlugininstallImport } from './routes/plugininstall'
import { Route as LibraryImport } from './routes/library'
import { Route as DonateImport } from './routes/donate'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PluginsIndexImport } from './routes/plugins.index'
import { Route as PluginsPluginIdIndexImport } from './routes/plugins/$pluginId.index'
import { Route as PluginsPluginIdOptionsImport } from './routes/plugins/$pluginId/options'
import { Route as PluginsPluginIdFeedIndexImport } from './routes/plugins/$pluginId/feed.index'
import { Route as PluginsPluginIdFeedSearchImport } from './routes/plugins/$pluginId/feed.search'
import { Route as PluginsPluginIdFeedApiIdImport } from './routes/plugins/$pluginId/feed.$apiId'

// Create/Update Routes

const ViewerRoute = ViewerImport.update({
  id: '/viewer',
  path: '/viewer',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PlugininstallRoute = PlugininstallImport.update({
  id: '/plugininstall',
  path: '/plugininstall',
  getParentRoute: () => rootRoute,
} as any)

const LibraryRoute = LibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const DonateRoute = DonateImport.update({
  id: '/donate',
  path: '/donate',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsIndexRoute = PluginsIndexImport.update({
  id: '/plugins/',
  path: '/plugins/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdIndexRoute = PluginsPluginIdIndexImport.update({
  id: '/plugins/$pluginId/',
  path: '/plugins/$pluginId/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdOptionsRoute = PluginsPluginIdOptionsImport.update({
  id: '/plugins/$pluginId/options',
  path: '/plugins/$pluginId/options',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedIndexRoute = PluginsPluginIdFeedIndexImport.update({
  id: '/plugins/$pluginId/feed/',
  path: '/plugins/$pluginId/feed/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedSearchRoute = PluginsPluginIdFeedSearchImport.update({
  id: '/plugins/$pluginId/feed/search',
  path: '/plugins/$pluginId/feed/search',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedApiIdRoute = PluginsPluginIdFeedApiIdImport.update({
  id: '/plugins/$pluginId/feed/$apiId',
  path: '/plugins/$pluginId/feed/$apiId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/donate': {
      id: '/donate'
      path: '/donate'
      fullPath: '/donate'
      preLoaderRoute: typeof DonateImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/plugininstall': {
      id: '/plugininstall'
      path: '/plugininstall'
      fullPath: '/plugininstall'
      preLoaderRoute: typeof PlugininstallImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/viewer': {
      id: '/viewer'
      path: '/viewer'
      fullPath: '/viewer'
      preLoaderRoute: typeof ViewerImport
      parentRoute: typeof rootRoute
    }
    '/plugins/': {
      id: '/plugins/'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/options': {
      id: '/plugins/$pluginId/options'
      path: '/plugins/$pluginId/options'
      fullPath: '/plugins/$pluginId/options'
      preLoaderRoute: typeof PluginsPluginIdOptionsImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/': {
      id: '/plugins/$pluginId/'
      path: '/plugins/$pluginId'
      fullPath: '/plugins/$pluginId'
      preLoaderRoute: typeof PluginsPluginIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/$apiId': {
      id: '/plugins/$pluginId/feed/$apiId'
      path: '/plugins/$pluginId/feed/$apiId'
      fullPath: '/plugins/$pluginId/feed/$apiId'
      preLoaderRoute: typeof PluginsPluginIdFeedApiIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/search': {
      id: '/plugins/$pluginId/feed/search'
      path: '/plugins/$pluginId/feed/search'
      fullPath: '/plugins/$pluginId/feed/search'
      preLoaderRoute: typeof PluginsPluginIdFeedSearchImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/': {
      id: '/plugins/$pluginId/feed/'
      path: '/plugins/$pluginId/feed'
      fullPath: '/plugins/$pluginId/feed'
      preLoaderRoute: typeof PluginsPluginIdFeedIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/donate': typeof DonateRoute
  '/library': typeof LibraryRoute
  '/plugininstall': typeof PlugininstallRoute
  '/privacy': typeof PrivacyRoute
  '/settings': typeof SettingsRoute
  '/viewer': typeof ViewerRoute
  '/plugins': typeof PluginsIndexRoute
  '/plugins/$pluginId/options': typeof PluginsPluginIdOptionsRoute
  '/plugins/$pluginId': typeof PluginsPluginIdIndexRoute
  '/plugins/$pluginId/feed/$apiId': typeof PluginsPluginIdFeedApiIdRoute
  '/plugins/$pluginId/feed/search': typeof PluginsPluginIdFeedSearchRoute
  '/plugins/$pluginId/feed': typeof PluginsPluginIdFeedIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/donate': typeof DonateRoute
  '/library': typeof LibraryRoute
  '/plugininstall': typeof PlugininstallRoute
  '/privacy': typeof PrivacyRoute
  '/settings': typeof SettingsRoute
  '/viewer': typeof ViewerRoute
  '/plugins': typeof PluginsIndexRoute
  '/plugins/$pluginId/options': typeof PluginsPluginIdOptionsRoute
  '/plugins/$pluginId': typeof PluginsPluginIdIndexRoute
  '/plugins/$pluginId/feed/$apiId': typeof PluginsPluginIdFeedApiIdRoute
  '/plugins/$pluginId/feed/search': typeof PluginsPluginIdFeedSearchRoute
  '/plugins/$pluginId/feed': typeof PluginsPluginIdFeedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/donate': typeof DonateRoute
  '/library': typeof LibraryRoute
  '/plugininstall': typeof PlugininstallRoute
  '/privacy': typeof PrivacyRoute
  '/settings': typeof SettingsRoute
  '/viewer': typeof ViewerRoute
  '/plugins/': typeof PluginsIndexRoute
  '/plugins/$pluginId/options': typeof PluginsPluginIdOptionsRoute
  '/plugins/$pluginId/': typeof PluginsPluginIdIndexRoute
  '/plugins/$pluginId/feed/$apiId': typeof PluginsPluginIdFeedApiIdRoute
  '/plugins/$pluginId/feed/search': typeof PluginsPluginIdFeedSearchRoute
  '/plugins/$pluginId/feed/': typeof PluginsPluginIdFeedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/donate'
    | '/library'
    | '/plugininstall'
    | '/privacy'
    | '/settings'
    | '/viewer'
    | '/plugins'
    | '/plugins/$pluginId/options'
    | '/plugins/$pluginId'
    | '/plugins/$pluginId/feed/$apiId'
    | '/plugins/$pluginId/feed/search'
    | '/plugins/$pluginId/feed'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/donate'
    | '/library'
    | '/plugininstall'
    | '/privacy'
    | '/settings'
    | '/viewer'
    | '/plugins'
    | '/plugins/$pluginId/options'
    | '/plugins/$pluginId'
    | '/plugins/$pluginId/feed/$apiId'
    | '/plugins/$pluginId/feed/search'
    | '/plugins/$pluginId/feed'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/donate'
    | '/library'
    | '/plugininstall'
    | '/privacy'
    | '/settings'
    | '/viewer'
    | '/plugins/'
    | '/plugins/$pluginId/options'
    | '/plugins/$pluginId/'
    | '/plugins/$pluginId/feed/$apiId'
    | '/plugins/$pluginId/feed/search'
    | '/plugins/$pluginId/feed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  DonateRoute: typeof DonateRoute
  LibraryRoute: typeof LibraryRoute
  PlugininstallRoute: typeof PlugininstallRoute
  PrivacyRoute: typeof PrivacyRoute
  SettingsRoute: typeof SettingsRoute
  ViewerRoute: typeof ViewerRoute
  PluginsIndexRoute: typeof PluginsIndexRoute
  PluginsPluginIdOptionsRoute: typeof PluginsPluginIdOptionsRoute
  PluginsPluginIdIndexRoute: typeof PluginsPluginIdIndexRoute
  PluginsPluginIdFeedApiIdRoute: typeof PluginsPluginIdFeedApiIdRoute
  PluginsPluginIdFeedSearchRoute: typeof PluginsPluginIdFeedSearchRoute
  PluginsPluginIdFeedIndexRoute: typeof PluginsPluginIdFeedIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  DonateRoute: DonateRoute,
  LibraryRoute: LibraryRoute,
  PlugininstallRoute: PlugininstallRoute,
  PrivacyRoute: PrivacyRoute,
  SettingsRoute: SettingsRoute,
  ViewerRoute: ViewerRoute,
  PluginsIndexRoute: PluginsIndexRoute,
  PluginsPluginIdOptionsRoute: PluginsPluginIdOptionsRoute,
  PluginsPluginIdIndexRoute: PluginsPluginIdIndexRoute,
  PluginsPluginIdFeedApiIdRoute: PluginsPluginIdFeedApiIdRoute,
  PluginsPluginIdFeedSearchRoute: PluginsPluginIdFeedSearchRoute,
  PluginsPluginIdFeedIndexRoute: PluginsPluginIdFeedIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/donate",
        "/library",
        "/plugininstall",
        "/privacy",
        "/settings",
        "/viewer",
        "/plugins/",
        "/plugins/$pluginId/options",
        "/plugins/$pluginId/",
        "/plugins/$pluginId/feed/$apiId",
        "/plugins/$pluginId/feed/search",
        "/plugins/$pluginId/feed/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/donate": {
      "filePath": "donate.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/plugininstall": {
      "filePath": "plugininstall.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/viewer": {
      "filePath": "viewer.tsx"
    },
    "/plugins/": {
      "filePath": "plugins.index.tsx"
    },
    "/plugins/$pluginId/options": {
      "filePath": "plugins/$pluginId/options.tsx"
    },
    "/plugins/$pluginId/": {
      "filePath": "plugins/$pluginId.index.tsx"
    },
    "/plugins/$pluginId/feed/$apiId": {
      "filePath": "plugins/$pluginId/feed.$apiId.tsx"
    },
    "/plugins/$pluginId/feed/search": {
      "filePath": "plugins/$pluginId/feed.search.tsx"
    },
    "/plugins/$pluginId/feed/": {
      "filePath": "plugins/$pluginId/feed.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
