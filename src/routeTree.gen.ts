/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewerImport } from './routes/viewer'
import { Route as SettingsImport } from './routes/settings'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PlugininstallImport } from './routes/plugininstall'
import { Route as LibraryImport } from './routes/library'
import { Route as DonateImport } from './routes/donate'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PluginsIndexImport } from './routes/plugins.index'
import { Route as PluginsPluginIdIndexImport } from './routes/plugins/$pluginId.index'
import { Route as PluginsPluginIdOptionsImport } from './routes/plugins/$pluginId/options'
import { Route as PluginsPluginIdFeedIndexImport } from './routes/plugins/$pluginId/feed.index'
import { Route as PluginsPluginIdFeedSearchImport } from './routes/plugins/$pluginId/feed.search'
import { Route as PluginsPluginIdFeedApiIdImport } from './routes/plugins/$pluginId/feed.$apiId'

// Create/Update Routes

const ViewerRoute = ViewerImport.update({
  path: '/viewer',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PlugininstallRoute = PlugininstallImport.update({
  path: '/plugininstall',
  getParentRoute: () => rootRoute,
} as any)

const LibraryRoute = LibraryImport.update({
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const DonateRoute = DonateImport.update({
  path: '/donate',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsIndexRoute = PluginsIndexImport.update({
  path: '/plugins/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdIndexRoute = PluginsPluginIdIndexImport.update({
  path: '/plugins/$pluginId/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdOptionsRoute = PluginsPluginIdOptionsImport.update({
  path: '/plugins/$pluginId/options',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedIndexRoute = PluginsPluginIdFeedIndexImport.update({
  path: '/plugins/$pluginId/feed/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedSearchRoute = PluginsPluginIdFeedSearchImport.update({
  path: '/plugins/$pluginId/feed/search',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdFeedApiIdRoute = PluginsPluginIdFeedApiIdImport.update({
  path: '/plugins/$pluginId/feed/$apiId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/donate': {
      preLoaderRoute: typeof DonateImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/plugininstall': {
      preLoaderRoute: typeof PlugininstallImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/viewer': {
      preLoaderRoute: typeof ViewerImport
      parentRoute: typeof rootRoute
    }
    '/plugins/': {
      preLoaderRoute: typeof PluginsIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/options': {
      preLoaderRoute: typeof PluginsPluginIdOptionsImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/': {
      preLoaderRoute: typeof PluginsPluginIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/$apiId': {
      preLoaderRoute: typeof PluginsPluginIdFeedApiIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/search': {
      preLoaderRoute: typeof PluginsPluginIdFeedSearchImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/feed/': {
      preLoaderRoute: typeof PluginsPluginIdFeedIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AboutRoute,
  DonateRoute,
  LibraryRoute,
  PlugininstallRoute,
  PrivacyRoute,
  SettingsRoute,
  ViewerRoute,
  PluginsIndexRoute,
  PluginsPluginIdOptionsRoute,
  PluginsPluginIdIndexRoute,
  PluginsPluginIdFeedApiIdRoute,
  PluginsPluginIdFeedSearchRoute,
  PluginsPluginIdFeedIndexRoute,
])

/* prettier-ignore-end */
